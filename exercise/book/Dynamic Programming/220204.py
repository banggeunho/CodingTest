# 코딩테스트 대비 기초 문제 풀이 16일차
# Date : 2022. 02. 03.
# 다이내믹 프로그래밍(DP))


# 다이나믹 프로그래밍(동적 계획법) // 탑다운(TOP-DOWN), 보텀업(BOTTOM-UP) 2가지 방식이 있다.
# 메모이제이션(Memoization) 기법까지 공부

# 피보나치 수열 구현

def fibo(x):
  if x == 1 or x == 2:
    return 1
  return fibo(x - 1) + fibo(x - 2)

print(fibo(4))

# 하지만 이런 식으로 구현하면 심각한 문제 발생 -> n이 커지면 수행 시간이 기하급수적으로 늘어나기 때문
# O(N^2)

# 다이나믹 프로그래밍은 다음 조건을 만족할 때 사용할 수 있다.

# 1. 큰 문제를 작은 문제로 나눌 수 있다.
# 2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.

# 메모이제이션 기법 (Memoization) : 한 번 구한 결과를 메모리 공간에 메모해두고 같은 식을 다시 호출하면 메모한 결과를 그대로
# 가져오는 기법을 의미한다. 캐싱(Caching)이라고도 함.abs

# 한 번 계산된 결과를 메모이제이션 하기 위한 리스트 초기화
d = [0] * 100

# 피보나치 함수를 재귀함수로 구현(탑 다운 방식)

def fibo(x):
  # 종료 조건(1 혹은 2일 때 1을 반환)
  if x == 1 or x == 2:
    return 1
  # 이미 계산한 적 있는 문제라면 그대로 반환
  if d[x] != 0:
    return d[x]
  # 이미 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
  d[x] = fibo(x - 1) + fibo(x - 2)
  return d[x]

print(fibo(99))

# 다이나믹 프로그래밍을 적용했을 때 피보나치 수열 알고리즘의 시간 복잡도는 O(N)이다.

# 한 번 계산된 결과를 메모이제이션 하기 위한 리스트 초기화
d = [0] * 100

def pibo(x):
  print('f(' + str(x) + ')', end=' ')
  # 종료 조건(1 혹은 2일 때 1을 반환)
  if x == 1 or x == 2:
    return 1
  # 이미 계산한 적 있는 문제라면 그대로 반환
  if d[x] != 0:
    return d[x]
  # 이미 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
  d[x] = pibo(x - 1) + pibo(x - 2)
  return d[x]

print(pibo(6))

# 재귀 함수를 이용하여 다이나믹 프로그래밍 소스코드를 작성하는 방법을, 큰 문제를 해결하기 위해 작은 문제를 호출한다고 하여
# '탑다운 방식'이라고  한다.

# 반면 단순한 반복문을 이용하여 소스코드를 작성하는 경우 작은 문제부터 차근차근 답을 도출한다고 하여 바텀업 방식이라고 말한다.

# 피보나치수열(바텀업)

d = [0] * 100

d[1] = 1
d[2] = 1
n = 99

for i in range(3, n+1):
  d[i] = d[i - 1] + d[i - 2]

print(d[n])
